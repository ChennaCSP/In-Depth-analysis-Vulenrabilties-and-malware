1.	Attackers use name conflicts. They can extend an already existing class DeleteRangeTimelineOperation and use type confusion – The extended class can have a property name “placement” which is already a name of an interface in the libraries. And using this type name confusion, they can call the inner interface function getBinding to get the bind ID. Basically tricking the program to think that this property name “placement” is refering to some internal interface, and hence, have access to some functions that that interface has.

2.	The exploit defines an object that extends ByteArray class to get access to the memory location and the objects that are stored in there. Then it loops from memory location 0 to the length (len) of the memory, and saves all the objects stored in those memory locations. This is what it looks like after saving all the objects. “These objects look as follows when in memory”.

 

3.	Using the same type name confusion as earlier, the exploit tried to get the length of the memory used using ByteArray, it reads out of bound – basically it gets the location address which is not yet used and it exceeding the memory limit, hence, getting the information on the data buffer pointer (buffer pointer is the location that ByteArray points at in the memory to store new data, or it points at the memory location that was last used to store the data), then after getting the data buffer pointer, they can set that pointer location to “attacker-controlled area”. Thus finding the target location or ByteArray.

4.	When one extends the bytearray object, they can have the ability to read and write in the memory. Then they manipulate the objects and extend their length to the maximum possible 0xffffffff and data buffer or pointer address to 0, and hence corrupting the data. Basically interfering with the buffer pointer location to write the data and read the data where it is not intended to do from..
